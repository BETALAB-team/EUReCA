# Setting Input Data 

Input_files = {'epw' : 'ITA_Venezia-Tessera.161050_IGDG.epw',       # STR : epw file name
               'envelopes' : 'Envelopes.xlsx',                      # STR : envelopes file name
               'end-uses' : 'ScheduleComp.xlsx',                    # STR : end-uses file name
               'plants' : 'PlantsList.xlsx',                        # STR : plants file name
               'json' : 'PiovegoRestricted_with_holes.geojson',                     # STR : json file name
               'default_input_path' : os.path.join('.','Input'),    # STR : input path file name
               'end-uses_mod' : 'Yearly',                            # STR : Daily or Yearly
               'json_mod' : 'geojson'                              # STR : geojson or cityjson
               }

Sim_input = {'year' : 2020,                                 # INT : the year, it is usedin order to create the schedule set, but it's almost useless
             'first_day' : 7,                               # INT : first day of the year
             'tz' : 'Europe/Rome',                          # STR : Thermal zone
             'ts' : 2,                                      # INT : Number of time-steps per hour
             'hours' : 8760,                                # INT : number of hours (actually only 8760 is implemented)
             'model' : '2C',                                # STR : model to be used (2C, 1C)
             'DD_boundaries' : np.array(
                             [[167,504], [4681,5017]],
                             dtype = int),                  # np.array : Heating and Cooling Design Days Periods
             'Time_to_regime' : 168,                        # INT : Time needed to reach a regime condition for Design Days Calculation
             'DesignDays_calc' : True,                      # BOOL : Select 'YES' or 'NO' to calculate or not design days demand
             'Plant_calc' : True,                           # BOOL : Select 'YES' or 'NO' to calculate or not buildings plant
             'OutputReport' : True, 
             
             'azSubdiv' : 8,                                # INT : Azimuth subdivision
             'hSubdiv' : 3,                                 # INT : Tilt subdivision
             'SolarCalc' : True,                           # BOOL : Need of a Solar Calculation?
 
             'Shading_calc' : True,                         # BOOL : Select 'YES' or 'NO' to take into consideration the shading effect
             'toll_az' : float(80),                         # FLOAT : Semi-tollerance on azimuth of shading surface [°]
             'toll_dist' : float(100),                      # FLOAT : Tollerance on distance of shading surface [m]
             'toll_theta' : float(80),                      # FLOAT : Semi-tollerance on position of the shading surfaces [°]
             'R_f' : float(0),                               # FLOAT : Reduction factor of the direct solar radiation due to the shading effect [0-1]

             'DHW_calc' : True,                      	    # BOOL : True or False (only for residential)
             'Volume_calc_method' : 'Static',               # STRING : Methods for the calculation of the flow rate: 'Static', 'ISO 11300-2'
             'Precision' : 'Time step',                          # STRING : If yearly or timestep claculation: 'Timestep', 'Year'
    	     'DHW End-uses': 'Residential;Residenziale'     # STRING : string with all the residential end-uses list (simicolons separator) 
            }


# Urban Canyon Data

UWG_data = {
    'UWG_calc' : bool(True), 
    'Area' : float(538000),
    'Diameter': float(800),
    'Perimeter': float(3280),
    'Ortogonal_length': float(800),
    'h_layer_inf': int(2),
    'h_layer_sup': int(150),
    'z_i_day': int(1000),
    'z_i_night': int(50),
    'z_i_m': int(10),
    'z_i_ref': int(150),
    'ExtWall_radiative_coef': float(5),
    'ExtWall_convective_coef': float(17),
    'ExtWall_emissivity': float(0.85),
    'ExtWall_reflection': float(0.15),
    'Average_U_windows': float(2),
    'Vegetation_density': float(0.16),
    'Road_radiative_coef': float(5),
    
    'Road_layers': np.array([
        [0.05, 1.9*10**6, 273 + 10],
        [0.2 , 2*10**6,   273 + 12],
        [1   , 1.4*10**6, 273 + 13],
        ], dtype = float),                          # first column thickness [m], second capacity [J/m3K], first row asphalt, second stones, third gravel 
        
    'Soil_layers': np.array([
        [3 , 1.4*10**6, 273 + 10],
        [3 , 1.4*10**6, 273 + 12],
        [3 , 1.4*10**6, 273 + 13],
        ], dtype = float),                          # first column thickness [m], second capacity [J/m3K]
    'T_deep': float(13+273),
    
    
    'cars_number_over_1000_px': float(39545000/60360),
    'motorcycles_number_over_1000_px': float(6896000/60360),
    'othervehicle_number_over_1000_px': float(5364000/60360),
    'emission_factor_cars_over_1000_px': float(	24.74 ),
    'emission_factor_motorcycles_over_1000_px': float(13.34),
    'emission_factor_othervehicle_over_1000_px': float(104.95),
    'vehicle_multiplying_factor': float(1),
    'distance_per_hour': float(64000),
    'population_density': float(2283.2),
    'first_day': Sim_input['first_day'],
    'Hw_week': np.array([0.9,0.5,0.9,2.1,3.3,4.2,5.8,7.1,6.3,5.8,5.4,5.4,5.8,6.3,6.7,7.1,7.5,5.8,4.2,3.3,2.5,1.7,1.3,0.9])/100,
    'Hw_end': np.array([1.7,1.2,1.,1.7,2.6,3.3,4.2,5,5.8,6.2,6.7,6.7,6.7,6.7,6.3,5.8,5,4.6,4.2,3.7,3.3,2.9,2.5,2.1])/100    
    }

'''
Reference H_traffic
Italian vehicles number: http://www.opv.aci.it/WEBDMCircolante/
emission factors
https://link.springer.com/article/10.1007/s00704-008-0086-5/tables/4
with 64 km/h

'''